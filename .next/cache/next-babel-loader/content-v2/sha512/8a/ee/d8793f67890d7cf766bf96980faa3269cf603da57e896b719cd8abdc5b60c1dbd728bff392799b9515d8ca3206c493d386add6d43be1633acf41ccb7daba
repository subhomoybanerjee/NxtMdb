{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\code\\\\react\\\\nextjs\\\\pages\\\\[meetupId].js\";\nimport MeetUpDetail from \"../components/meetups/MeetUpDetail\";\nimport { MongoClient, ObjectId } from 'mongodb';\n\nfunction MeetUpDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://moy:1234@nextjs.ilt3hfj.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('yay');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  });\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(x => ({\n      params: {\n        meetupId: x._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://moy:1234@nextjs.ilt3hfj.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('yay');\n  const SelectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: SelectedMeetup._id.toString(),\n        title: SelectedMeetup.title,\n        address: SelectedMeetup.address,\n        image: SelectedMeetup.image,\n        description: SelectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetUpDetails;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/code/react/nextjs/pages/[meetupId].js"],"names":["MeetUpDetail","MongoClient","ObjectId","MeetUpDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","close","fallback","paths","map","x","params","meetupId","toString","getStaticProps","context","SelectedMeetup","findOne","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,oCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD5B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF5B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH9B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJlC;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AAEnC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACjB,gFADiB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,KAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,CAAtB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAGA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,CAAC,KAAK;AACrBC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,CAAC,CAACL,GAAF,CAAMQ,QAAN;AADN;AADa,KAAL,CAAb;AAFJ,GAAP;AASH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACjB,gFADiB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,KAAd,CAA1B;AACA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AAAEZ,IAAAA,GAAG,EAAEhB,QAAQ,CAACuB,QAAD;AAAf,GAA1B,CAA7B;AAEAd,EAAAA,MAAM,CAACQ,KAAP;AAGA,SAAO;AACHf,IAAAA,KAAK,EAAE;AACHC,MAAAA,UAAU,EAAE;AACR0B,QAAAA,EAAE,EAACF,cAAc,CAACX,GAAf,CAAmBQ,QAAnB,EADK;AAERnB,QAAAA,KAAK,EAACsB,cAAc,CAACtB,KAFb;AAGRC,QAAAA,OAAO,EAACqB,cAAc,CAACrB,OAHf;AAIRF,QAAAA,KAAK,EAACuB,cAAc,CAACvB,KAJb;AAKRG,QAAAA,WAAW,EAACoB,cAAc,CAACpB;AALnB;AADT;AADJ,GAAP;AAWH;AAED,eAAeN,aAAf","sourcesContent":["import MeetUpDetail from \"../components/meetups/MeetUpDetail\";\r\nimport { MongoClient, ObjectId } from 'mongodb'\r\n\r\nfunction MeetUpDetails(props) {\r\n    return (\r\n        <MeetUpDetail\r\n            image={props.meetupData.image}\r\n            title={props.meetupData.title}\r\n            address={props.meetupData.address}\r\n            description={props.meetupData.description}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://moy:1234@nextjs.ilt3hfj.mongodb.net/?retryWrites=true&w=majority'\r\n    )\r\n    const db = client.db()\r\n    const meetupsCollection = db.collection('yay')\r\n    const meetups = await meetupsCollection.find({},{_id:1})\r\n\r\n    client.close()\r\n\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map(x => ({\r\n            params: {\r\n                meetupId: x._id.toString()\r\n            },\r\n        })\r\n        )\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n\r\n    const meetupId = context.params.meetupId\r\n\r\n    const client = await MongoClient.connect(\r\n        'mongodb+srv://moy:1234@nextjs.ilt3hfj.mongodb.net/?retryWrites=true&w=majority'\r\n    )\r\n    const db = client.db()\r\n    const meetupsCollection = db.collection('yay')\r\n    const SelectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\r\n\r\n    client.close()\r\n\r\n\r\n    return {\r\n        props: {\r\n            meetupData: {\r\n                id:SelectedMeetup._id.toString(),\r\n                title:SelectedMeetup.title,\r\n                address:SelectedMeetup.address,\r\n                image:SelectedMeetup.image,\r\n                description:SelectedMeetup.description\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetUpDetails\r\n\r\n"]},"metadata":{},"sourceType":"module"}